{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "스택 수열ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPHRm6bJG+m+HK53ghf3fJv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Juko626/Learning-Codingtest-Python/blob/main/1874%EB%B2%88%20%EC%8A%A4%ED%83%9D%EC%88%98%EC%97%B4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "HEcHbCZZndPs",
        "outputId": "30515365-c2ec-4df5-b9f9-7f3775fa360d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "8\n",
            "4\n",
            "3\n",
            "6\n",
            "8\n",
            "7\n",
            "5\n",
            "2\n",
            "\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-cc5895b6ed1f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mnum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0;32mwhile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcount\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
          ]
        }
      ],
      "source": [
        "n = int(input())\n",
        "s=[]\n",
        "op=[]\n",
        "count=1\n",
        "temp=True\n",
        "\n",
        "for i in range(n):\n",
        "    num=int(input())\n",
        "    while(count <= num):\n",
        "        s.append(count)\n",
        "        op.append('+')\n",
        "        count+=1\n",
        "    if s[-1] ==num:\n",
        "        s.pop()\n",
        "        op.append('-')\n",
        "    else:\n",
        "        temp=False\n",
        "if temp==False:\n",
        "    print('No')\n",
        "else:\n",
        "    for i in op:\n",
        "        print(i)\n",
        "\n",
        "    \n",
        "        "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list_a=[4,3,6,8,7,5,2,1]\n",
        "list_b=[1,2,3,4,5,6,7,8]\n",
        "result=[]\n",
        "result_1=[]\n",
        "cnt=1\n",
        "N=int(input())\n",
        "temp=True\n",
        "for i in range(N):\n",
        "    num=int(input())\n",
        "    while(cnt <=num):\n",
        "        result.append(cnt)\n",
        "        result_1.append(\"+\")\n",
        "        cnt+=1\n",
        "    \n",
        "    if result[-1]==num:\n",
        "        result.pop()\n",
        "        result_1.append(\"-\")\n",
        "\n",
        "    else:\n",
        "        temp=False\n",
        "        break\n",
        "if temp==False:\n",
        "    print(\"No\")\n",
        "else:\n",
        "    for i in result_1:\n",
        "        print(i)\n",
        "   "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nl212O7_woOx",
        "outputId": "ee5da938-a947-4cf2-ce8f-0de4ee871372"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n",
            "3\n",
            "6\n",
            "8\n",
            "7\n",
            "5\n",
            "2\n",
            "1\n",
            "+\n",
            "+\n",
            "+\n",
            "+\n",
            "-\n",
            "-\n",
            "+\n",
            "+\n",
            "-\n",
            "+\n",
            "+\n",
            "-\n",
            "-\n",
            "-\n",
            "-\n",
            "-\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "count = 1\n",
        "temp = True\n",
        "stack = []\n",
        "op = []\n",
        "\n",
        "N = int(input())\n",
        "for i in range(N):\n",
        "    num = int(input())\n",
        "    # num이하 숫자까지 스택에 넣기\n",
        "    while count <= num:\n",
        "        stack.append(count)\n",
        "        op.append('+')\n",
        "        count += 1\n",
        "\n",
        "    # num이랑 스택 맨 위 숫자가 동일하다면 제거\n",
        "    if stack[-1] == num:\n",
        "        stack.pop()\n",
        "        op.append('-')\n",
        "    # 스택 수열을 만들 수 없으므로 NO\n",
        "    else:\n",
        "        temp = False\n",
        "        break\n",
        "\n",
        "# 스택 수열을 만들수 있는지 여부에 따라 출력 \n",
        "if temp == False:\n",
        "    print(\"NO\")\n",
        "else:\n",
        "    for i in op:\n",
        "        print(i)"
      ],
      "metadata": {
        "id": "y4X5iU1TLkUy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "VpSkzwkcI-NA"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}